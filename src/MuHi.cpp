///////////////////////////////////////////////////////////////
//                     MuHi
//         Multifunctionals E(/Hi)yes
//
//   @author: Daniele Barattieri di San Pietro
//   @email : danielebarattieri[at]gmail.com
//   @copyright: 2016
//
//  ----------------------------------------------------------
//  This project is hosted and supported by the ÂµHack assosiation,
//  with love from Brescia, Italy ( www.muhack.org ) ;)
//  The aim of this project is to provide a software assistance for
//  tetraplegic, using a webcam to detect the eyes' blinks.
//  ----------------------------------------------------------
//
//  This Software is distribuited under the GNU/GPL license
//  Fot more informations, please see the LICENSE and README
//  file attached to the source code
//
////////////////////////////////////////////////////////////////

//============================================================================
// Name        : MuHi.cpp
// Author      : MrMoDDoM
// Version     : 1.0
// Copyright   : GNU/GPL
// Description : MuHi in C++, Ansi-style
//============================================================================

/*
    This file is part of MuHi.
    Copyright (C) 2016  Daniele Barattieri di San Pietro

    MuHi is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Foobar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MuHi.  If not, see <http://www.gnu.org/licenses/> or
    <http://www.muhack.org/> for futher datails.

*/

#include "MuHi.h"
#include "WebcamWorker.h"
#include "OutputWorker.h"
#include "Settings.h"

Settings setting;

int init(){
	print_logo();

	cout<<"Loading settings..."<<endl;
	setting.set_default();

	cout<<"Setting variables..."<<endl;
	fin = false; //For exiting the main loop

	cout<<"Opening webcam stream..."<<endl;
	//webcamWorker
	if(initCamWorker(&setting))
		return -1;

	//Init the Output worker to send key stroke
	cout<<"Setting up output stream..."<<endl;
	if(initOutputWorker(&setting))
		return -1;


	//All went ok!
	cout<<"All ok! Let's go!"<<endl;
	return 0;
}

//We need to ensure that all memory&devices are proprely released
int exit(){
	cout<<"Closing..."<<endl;
	fin = true;
	destroyCamWorker();
	return 0;
}

int exitWithError(std::string msg){
	cout<<msg<<endl;
	return exit();
}

//This function procede to open an external application
//NEED TO BE BETTER IMPLEMENTED -> NOT USED AT THIS MOMENT!
int open_program( FILE *f, std::string path){
    	f = popen (path.c_str(), "w");
	if (!f){
		perror ("Error on popen!!!");
		return 1;
	}
	else return 0;
}

//Just prin an ascii-style logo of MuHi! :)
void print_logo(){
unsigned char logo_muhi[] = {
  0x0a, 0x0a, 0x20, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0x20, 0x20,
  0xe2, 0x96, 0x84, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0xe2, 0x96, 0x84, 0x20, 0x20, 0xe2, 0x96, 0x84, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x84, 0x20, 0x20, 0xe2, 0x96,
  0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96,
  0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96,
  0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0x20, 0x0a, 0xe2, 0x96, 0x90,
  0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20,
  0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2,
  0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91,
  0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96,
  0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x0a, 0xe2, 0x96, 0x90, 0xe2,
  0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20,
  0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x90, 0xe2,
  0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2,
  0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90,
  0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91,
  0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96,
  0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0xe2, 0x96, 0x80, 0xe2,
  0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x88, 0xe2,
  0x96, 0x91, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2,
  0x96, 0x80, 0xe2, 0x96, 0x80, 0x20, 0x0a, 0xe2, 0x96, 0x90, 0xe2, 0x96,
  0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x8c, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2,
  0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2,
  0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90,
  0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20,
  0x20, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x0a, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91,
  0xe2, 0x96, 0x8c, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0xe2, 0x96, 0x90, 0xe2,
  0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2,
  0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90,
  0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91,
  0xe2, 0x96, 0x88, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84,
  0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84,
  0xe2, 0x96, 0x88, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20,
  0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x0a, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2,
  0x96, 0x8c, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x8c, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c,
  0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90,
  0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0a,
  0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20,
  0xe2, 0x96, 0x80, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91,
  0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96,
  0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x88, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96,
  0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96,
  0x88, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20,
  0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x0a, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96,
  0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96,
  0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2,
  0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2,
  0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90,
  0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2,
  0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x0a, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91,
  0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x88,
  0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84,
  0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x88,
  0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91,
  0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96,
  0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0xe2, 0x96, 0x84, 0xe2,
  0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x88, 0xe2,
  0x96, 0x91, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x84, 0xe2, 0x96, 0x84, 0xe2,
  0x96, 0x84, 0xe2, 0x96, 0x84, 0x20, 0x0a, 0xe2, 0x96, 0x90, 0xe2, 0x96,
  0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2,
  0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2, 0x96, 0x90, 0xe2,
  0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2,
  0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2,
  0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0xe2,
  0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x8c,
  0xe2, 0x96, 0x90, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91,
  0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91,
  0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91, 0xe2, 0x96, 0x91,
  0xe2, 0x96, 0x8c, 0x0a, 0x20, 0xe2, 0x96, 0x80, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x80, 0x20, 0x20, 0xe2, 0x96,
  0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96,
  0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96,
  0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0x20, 0x20, 0xe2, 0x96, 0x80,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe2, 0x96, 0x80,
  0x20, 0x20, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2,
  0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2,
  0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0xe2, 0x96, 0x80, 0x20,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x0a, 0x0a
 };

unsigned char logo_muhi_sub[] = {
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x5f, 0x5f, 0x20, 0x20, 0x20, 0x20,
  0x5f, 0x5f, 0x5f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x5f, 0x5f, 0x20, 0x20, 0x5f, 0x5f, 0x5f, 0x20, 0x20,
  0x20, 0x20, 0x5f, 0x5f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x5f,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x5f, 0x5f, 0x20, 0x20, 0x20,
  0x2f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x5f, 0x5f, 0x5f, 0x20, 0x20, 0x5f, 0x5f, 0x20, 0x20, 0x0a,
  0x20, 0x7c, 0x5c, 0x2f, 0x7c, 0x20, 0x7c, 0x20, 0x20, 0x7c, 0x20, 0x7c,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x20, 0x7c, 0x20, 0x7c, 0x5f,
  0x5f, 0x20, 0x20, 0x7c, 0x20, 0x20, 0x7c, 0x20, 0x7c, 0x5c, 0x20, 0x7c,
  0x20, 0x2f, 0x20, 0x20, 0x60, 0x20, 0x20, 0x7c, 0x20, 0x20, 0x7c, 0x20,
  0x2f, 0x20, 0x20, 0x5c, 0x20, 0x7c, 0x5c, 0x20, 0x7c, 0x20, 0x20, 0x2f,
  0x5c, 0x20, 0x20, 0x7c, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x5f, 0x5f, 0x60,
  0x20, 0x20, 0x20, 0x20, 0x7c, 0x5f, 0x5f, 0x20, 0x20, 0x20, 0x2f, 0x20,
  0x20, 0x7c, 0x5f, 0x5f, 0x7c, 0x20, 0x7c, 0x20, 0x5c, 0x20, 0x2f, 0x20,
  0x7c, 0x5f, 0x5f, 0x20, 0x20, 0x2f, 0x5f, 0x5f, 0x60, 0x20, 0x0a, 0x20,
  0x7c, 0x20, 0x20, 0x7c, 0x20, 0x5c, 0x5f, 0x5f, 0x2f, 0x20, 0x7c, 0x5f,
  0x5f, 0x5f, 0x20, 0x20, 0x7c, 0x20, 0x20, 0x7c, 0x20, 0x7c, 0x20, 0x20,
  0x20, 0x20, 0x5c, 0x5f, 0x5f, 0x2f, 0x20, 0x7c, 0x20, 0x5c, 0x7c, 0x20,
  0x5c, 0x5f, 0x5f, 0x2c, 0x20, 0x20, 0x7c, 0x20, 0x20, 0x7c, 0x20, 0x5c,
  0x5f, 0x5f, 0x2f, 0x20, 0x7c, 0x20, 0x5c, 0x7c, 0x20, 0x2f, 0x7e, 0x7e,
  0x5c, 0x20, 0x7c, 0x5f, 0x5f, 0x5f, 0x20, 0x2e, 0x5f, 0x5f, 0x2f, 0x20,
  0x20, 0x20, 0x20, 0x7c, 0x5f, 0x5f, 0x5f, 0x20, 0x2f, 0x20, 0x20, 0x20,
  0x7c, 0x20, 0x20, 0x7c, 0x20, 0x7c, 0x20, 0x20, 0x7c, 0x20, 0x20, 0x7c,
  0x5f, 0x5f, 0x5f, 0x20, 0x2e, 0x5f, 0x5f, 0x2f, 0x20, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x0a
 };
 logo_muhi_sub;

 cout<<logo_muhi<<endl;
 cout<<logo_muhi_sub<<endl;
}

int main( int argc, char** argv ){

	//I FU***ING NEED A GOOD F***ING PARSER FOR F**ING PARSING THIS MOTHERF**KERS!
	if (argc > 50) { // Check the value of argc. If not enough parameters have been passed, inform user and exit.
        	std::cout << "Usage is \"MuHi [-v|-d|-h|-s] PROGRAM\"\n"<<endl; // Inform the user of how to use the program
        	exit(0);
    	} else { // if we got enough parameters...
        	char *program ;
        	//std::cout << argv[0];
        	for (int i = 1; i < argc; i++) { /* We will iterate over argv[] to get the parameters stored inside.
                	                          * Note that we're starting on 1 because we don't need to know the 
                        	                  * path of the program, which is stored in argv[0] */
            		if (i + 1 > argc){ // Check that we haven't finished parsing already
                		if (argv[i] == "-p") {
                    			// We know the next argument *should* be the filename:
                    			program = argv[i + 1];
                		} else if (argv[i] == "-d") {
                    			setting.debug = true;
                		} else if ( strcmp(argv[i], "-h") != 0) {
                    			cout<<"./MuHi - Multi-Functional (/Hi)eye"<<endl;
					cout<<"Usange: ./MuHi [-v|-d|-h|-s] PROGRAM"<<endl;
					cout<<endl;
					cout<<"\t -v: \tPrint this help and exit"<<endl;
					exit(0);
                		} else {
                    			std::cout << "Not enough or invalid arguments, please try again.\n";
                   			exit(0);
            			}
			}

           	 	std::cout << argv[i] << " ";
        	}
    	}

	//Some internal variables...
	int old_status = 0, countingSameStatus = 0;
	int blinkStatus = 0;

	if(init())
		exitWithError("Error initializing the system! STOP!");

	//MAIN LOOP
	while(!fin){
		//For this probably is better use an enum...
		// 0 - both open
		// 1 - right blink
		// 2 - left blink
		// 3 - both blink
		// 4 - no face
		// 5 - critcal error! In the name of the Great Spaghetti Monster, shut everything down!!! -- NOT YET IMPLEMENTED!

		blinkStatus = 0;

		if(!getFrame(&frame))
			exitWithError("Error getting frame! STOP!");

		blinkStatus = detectBlink(&frame, setting.blinkTresh, setting.debug, setting.thres);

		//Some anti bounce check - this counts the same status of eyes
		if(blinkStatus == old_status){
			countingSameStatus++;
		} else {
			old_status = blinkStatus;
			countingSameStatus = 0;
		}

		//Send to the OutPutWorker the eye's status only if the same status is repeted for countSameStatus's times
		if(countingSameStatus >= setting.countSameStatus){
			countingSameStatus = 0;
			sendKeyboardKey(blinkStatus);

		}

		//Keyboard controls -- NEED TO REMAKE!!!
		int c = waitKey(10);
		if( (char)c == 27 ) { fin = true; }
		if( (char)c == 'a' ) { setting.blinkTresh--; }
		if( (char)c == 's' ) { setting.blinkTresh++; }
		if( (char)c == 'c' ) { setting.thres--; }
		if( (char)c == 'v' ) { setting.thres++; }
/*		if( (char)c == 'd' ) {
			if(setting.debug){
				setting.debug = false;
				destroyWindow("Webcam");
			} else setting.debug = true;

		}*/

		//If the debug is activated, write HUD with usefull informations
		if(setting.debug){
			system("clear");
			stringstream out;
			out<<"Status: "<<blinkStatus<<" - Sensibility: "<<setting.blinkTresh<<" - Eyes threshold: "<<setting.thres;
			cout<<out.str()<<endl;
			putText(frame, out.str(), Point(10,15), FONT_HERSHEY_TRIPLEX, 0.5, Scalar::all(255), 1, 1, false);
			imshow("WebCam", frame);
		}
	}

	exit();
	cout<<"Thankyou for using MuHi! See you next time!"<<endl;
	//Exiting.. everything should went good.. maybe is important to implement some check (e.g. for the webcam..? )
	return 0;
}
